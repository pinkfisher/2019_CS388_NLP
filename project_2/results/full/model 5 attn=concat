attn_model = concat

==========START TRAINING=========
/Users/niyixuan/PycharmProjects/CS388_NLP/project_2_1/models.py:59: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.
  return F.softmax(attn_energies).unsqueeze(1)
/Users/niyixuan/PycharmProjects/CS388_NLP/venv/lib/python3.6/site-packages/torch/nn/functional.py:1339: UserWarning: nn.functional.tanh is deprecated. Use torch.tanh instead.
  warnings.warn("nn.functional.tanh is deprecated. Use torch.tanh instead.")
/Users/niyixuan/PycharmProjects/CS388_NLP/project_2_1/masked_cross_entropy.py:37: UserWarning: Implicit dimension choice for log_softmax has been deprecated. Change the call to include dim=X as an argument.
  log_probs_flat = functional.log_softmax(logits_flat)
/Users/niyixuan/PycharmProjects/CS388_NLP/project_2_1/masked_cross_entropy.py:9: UserWarning: torch.range is deprecated in favor of torch.arange and will be removed in 0.5. Note that arange generates values in [start; end), not [start; end].
  seq_range = torch.range(0, max_len - 1).long()
main.py:295: UserWarning: torch.nn.utils.clip_grad_norm is now deprecated in favor of torch.nn.utils.clip_grad_norm_.
  ec = torch.nn.utils.clip_grad_norm(encoder.parameters(), 50.0)
main.py:296: UserWarning: torch.nn.utils.clip_grad_norm is now deprecated in favor of torch.nn.utils.clip_grad_norm_.
  dc = torch.nn.utils.clip_grad_norm(decoder.parameters(), 50.0)
0m 56s (- 93m 33s) (1 1%) 636.0314
1m 49s (- 89m 19s) (2 2%) 465.1985
2m 40s (- 86m 40s) (3 3%) 365.6049
3m 37s (- 86m 53s) (4 4%) 350.4269
4m 31s (- 85m 56s) (5 5%) 355.4058
5m 30s (- 86m 17s) (6 6%) 328.5015
6m 27s (- 85m 52s) (7 7%) 297.1179
7m 22s (- 84m 53s) (8 8%) 282.7006
8m 18s (- 83m 57s) (9 9%) 282.7996
9m 14s (- 83m 12s) (10 10%) 258.0397
10m 12s (- 82m 33s) (11 11%) 259.1564
11m 8s (- 81m 42s) (12 12%) 224.3611
12m 3s (- 80m 44s) (13 13%) 231.8170
13m 0s (- 79m 53s) (14 14%) 218.9098
13m 52s (- 78m 39s) (15 15%) 233.3273
14m 48s (- 77m 45s) (16 16%) 212.1282
15m 42s (- 76m 43s) (17 17%) 192.1909
16m 39s (- 75m 52s) (18 18%) 179.1131
17m 32s (- 74m 47s) (19 19%) 171.8487
18m 23s (- 73m 35s) (20 20%) 174.7177
19m 14s (- 72m 23s) (21 21%) 173.0722
20m 1s (- 71m 1s) (22 22%) 164.6222
20m 47s (- 69m 35s) (23 23%) 162.0423
21m 32s (- 68m 11s) (24 24%) 162.2331
22m 19s (- 66m 59s) (25 25%) 133.8185
23m 8s (- 65m 51s) (26 26%) 135.6724
23m 56s (- 64m 43s) (27 27%) 140.7165
24m 44s (- 63m 36s) (28 28%) 151.4612
25m 35s (- 62m 38s) (29 28%) 138.5406
26m 26s (- 61m 40s) (30 30%) 149.8535
27m 16s (- 60m 42s) (31 31%) 141.8642
28m 7s (- 59m 45s) (32 32%) 127.9866
28m 58s (- 58m 49s) (33 33%) 114.3452
29m 48s (- 57m 51s) (34 34%) 122.9209
30m 36s (- 56m 51s) (35 35%) 126.3591
31m 24s (- 55m 50s) (36 36%) 134.7758
32m 15s (- 54m 55s) (37 37%) 113.2644
33m 6s (- 54m 0s) (38 38%) 131.0039
33m 59s (- 53m 9s) (39 39%) 126.2625
34m 50s (- 52m 15s) (40 40%) 103.7608
35m 41s (- 51m 21s) (41 41%) 95.9376
36m 31s (- 50m 25s) (42 42%) 104.8427
37m 21s (- 49m 31s) (43 43%) 107.1232
38m 10s (- 48m 35s) (44 44%) 108.0687
38m 59s (- 47m 39s) (45 45%) 101.4315
39m 48s (- 46m 44s) (46 46%) 105.3200
40m 37s (- 45m 49s) (47 47%) 103.1605
41m 27s (- 44m 55s) (48 48%) 94.0052
42m 16s (- 44m 0s) (49 49%) 89.6270
43m 6s (- 43m 6s) (50 50%) 102.1599
43m 54s (- 42m 10s) (51 51%) 102.0494
44m 42s (- 41m 16s) (52 52%) 92.0394
45m 35s (- 40m 25s) (53 53%) 109.6727
46m 24s (- 39m 31s) (54 54%) 84.8093
47m 14s (- 38m 38s) (55 55%) 96.8480
48m 2s (- 37m 44s) (56 56%) 101.7061
48m 50s (- 36m 50s) (57 56%) 82.7469
49m 40s (- 35m 58s) (58 57%) 83.2623
50m 32s (- 35m 7s) (59 59%) 98.1682
51m 21s (- 34m 14s) (60 60%) 84.9406
52m 10s (- 33m 21s) (61 61%) 85.1711
53m 0s (- 32m 29s) (62 62%) 79.1889
53m 49s (- 31m 36s) (63 63%) 97.0034
54m 38s (- 30m 44s) (64 64%) 90.4936
55m 25s (- 29m 50s) (65 65%) 84.7142
56m 11s (- 28m 56s) (66 66%) 79.2367
56m 57s (- 28m 3s) (67 67%) 95.9485
57m 42s (- 27m 9s) (68 68%) 88.3428
58m 28s (- 26m 16s) (69 69%) 74.2046
59m 14s (- 25m 23s) (70 70%) 84.0574
59m 59s (- 24m 30s) (71 71%) 94.7066
60m 46s (- 23m 37s) (72 72%) 80.5225
61m 32s (- 22m 45s) (73 73%) 99.0319
62m 19s (- 21m 53s) (74 74%) 82.7637
63m 8s (- 21m 2s) (75 75%) 90.9215
64m 0s (- 20m 12s) (76 76%) 86.4459
64m 53s (- 19m 22s) (77 77%) 104.8580
65m 49s (- 18m 33s) (78 78%) 83.7778
66m 40s (- 17m 43s) (79 79%) 105.1681
67m 34s (- 16m 53s) (80 80%) 85.1875
68m 27s (- 16m 3s) (81 81%) 87.1935
69m 14s (- 15m 11s) (82 82%) 80.3891
70m 6s (- 14m 21s) (83 83%) 80.6885
70m 59s (- 13m 31s) (84 84%) 72.6255
71m 48s (- 12m 40s) (85 85%) 85.2159
72m 35s (- 11m 48s) (86 86%) 79.2939
73m 23s (- 10m 58s) (87 87%) 82.3458
74m 14s (- 10m 7s) (88 88%) 67.5072
75m 4s (- 9m 16s) (89 89%) 83.4960
75m 50s (- 8m 25s) (90 90%) 66.8120
76m 39s (- 7m 34s) (91 91%) 98.5906
77m 29s (- 6m 44s) (92 92%) 103.7986
78m 18s (- 5m 53s) (93 93%) 96.9365
79m 8s (- 5m 3s) (94 94%) 76.8374
79m 58s (- 4m 12s) (95 95%) 84.4385
80m 46s (- 3m 21s) (96 96%) 69.7851
81m 34s (- 2m 31s) (97 97%) 93.9341
82m 22s (- 1m 40s) (98 98%) 75.2056
83m 11s (- 0m 50s) (99 99%) 79.6982
84m 0s (- 0m 0s) (100 100%) 80.9533
=======TRAIN EVALUATION=======
Loading JAR files: evaluator.jar
gold: 0 syntax errors, 0 executor errors
predicted: 1 syntax errors, 0 executor errors
Example 49
  x      = "what is the length of the colorado river in texas ?"
  y_tok  = "['_answer', '(', 'NV', ',', '(', '_len', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_riverid', '(', 'colorado', ')', ')', ',', '_river', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'texas', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_len', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_riverid', '(', 'colorado', ')', ')', ',', '_river', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'texas', ')', ')', ')', ')']"
Example 99
  x      = "how many cities are there in the us ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_count', '(', 'NV', ',', '(', '_city', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ',', 'V2', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_count', '(', 'NV', ',', '(', '_city', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ',', 'V2', ')', ')']"
Example 149
  x      = "what state has the most people ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_state', '(', 'V1', ')', ',', '_population', '(', 'V1', ',', 'V0', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_state', '(', 'V1', ')', ',', '_population', '(', 'V1', ',', 'V0', ')', ')', ')', ')']"
Example 199
  x      = "what is the population of oregon ?"
  y_tok  = "['_answer', '(', 'NV', ',', '(', '_population', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'oregon', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_population', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'oregon', ')', ')', ')', ')']"
Example 249
  x      = "what is the most populated capital in the usa ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_population', '(', 'V1', ',', 'V0', ')', ',', '_capital', '(', 'V1', ')', ',', '_loc', '(', 'V1', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_population', '(', 'V1', ',', 'V0', ')', ',', '_capital', '(', 'V1', ')', ',', '_loc', '(', 'V1', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ')', ')']"
Example 299
  x      = "what is the largest state traversed by the mississippi river ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '(', '_state', '(', 'V0', ')', ',', '_traverse', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_riverid', '(', 'mississippi', ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '(', '_state', '(', 'V0', ')', ',', '_traverse', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_riverid', '(', 'mississippi', ')', ')', ')', ')', ')']"
Example 349
  x      = "what is the smallest state bordering ohio ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_smallest', '(', 'V0', ',', '(', '_state', '(', 'V0', ')', ',', '_next_to', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'ohio', ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_smallest', '(', 'V0', ',', '(', '_state', '(', 'V0', ')', ',', '_next_to', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'ohio', ')', ')', ')', ')', ')']"
Example 399
  x      = "how many people live in california ?"
  y_tok  = "['_answer', '(', 'NV', ',', '(', '_population', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'california', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_population', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'california', ')', ')', ')', ')']"
Example 449
  x      = "in which state does the highest point in usa exist ?"
  y_tok  = "['_answer', '(', 'NV', ',', '(', '_loc', '(', 'NV', ',', 'V1', ')', ',', '_state', '(', 'V1', ')', ',', '_highest', '(', 'V0', ',', '(', '_place', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_loc', '(', 'NV', ',', 'V1', ')', ',', '_state', '(', 'V1', ')', ',', '_highest', '(', 'V0', ',', '(', '_place', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ')', ')', ')']"
Exact logical form matches: 476 / 480 = 0.992
Token-level accuracy: 15487 / 15498 = 0.999
Denotation matches: 479 / 480 = 0.998
=======END OF TRAIN EVALUATION=======
=======DEV EVALUATION=======
Loading JAR files: evaluator.jar
gold: 0 syntax errors, 0 executor errors
predicted: 5 syntax errors, 1 executor errors
Example 24
  x      = "what is the largest city in minnesota by population ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_city', '(', 'V1', ')', ',', '_loc', '(', 'V1', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'minnesota', ')', ')', ',', '_population', '(', 'V2', ',', 'V1', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '(', '_city', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'texas', ')', ')', ')', ')', ')']"
Example 49
  x      = "what is the longest river flowing through new york ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_longest', '(', 'V0', ',', '(', '_river', '(', 'V0', ')', ',', '_traverse', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', "'", 'new', 'york', "'", ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_longest', '(', 'V0', ',', '(', '_river', '(', 'V0', ')', ',', '_traverse', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', "'", 'new', 'york', "'", ')', ')', ')', ')', ')']"
Example 74
  x      = "what is the capital of utah ?"
  y_tok  = "['_answer', '(', 'NV', ',', '(', '_capital', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'utah', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_capital', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'utah', ')', ')', ')', ')']"
Example 99
  x      = "what is the lowest point in california ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_lowest', '(', 'V0', ',', '(', '_place', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'california', ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_lowest', '(', 'V0', ',', '(', '_place', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'california', ')', ')', ')', ')', ')']"
Exact logical form matches: 46 / 120 = 0.383
Token-level accuracy: 3121 / 3908 = 0.799
Denotation matches: 51 / 120 = 0.425
=======END OF DEV EVALUATION=======
=======FINAL EVALUATION ON BLIND TEST=======
Loading JAR files: evaluator.jar
gold: 0 syntax errors, 0 executor errors
predicted: 9 syntax errors, 11 executor errors
Example 49
  x      = "what state has the most major cities ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '_state', '(', 'V0', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_most', '(', 'V0', ',', 'NV', ',', '(', '_state', '(', 'V1', ')', ',', '_loc', '(', 'V0', ',', 'V1', ')', ',', '_city', '(', 'V0', ')', ')', ')', ')']"
Example 99
  x      = "what are the major cities in the usa ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '_state', '(', 'V0', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_major', '(', 'V0', ')', ',', '_city', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ')']"
Example 149
  x      = "which state has the lowest point that borders idaho ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '_state', '(', 'V0', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_state', '(', 'V0', ')', ',', '_high_point', '(', 'NV', ',', 'V1', ')', ',', '_lowest', '(', 'V0', ',', '_place', '(', 'V0', ')', ')', ')', ')']"
Example 199
  x      = "how long is the longest river in california ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '_state', '(', 'V0', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_len', '(', 'NV', ',', 'V1', ')', ',', '_longest', '(', 'V0', ',', '(', '_river', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', "'", 'west', 'virginia', "'", ')', ')', ')', ')', ')']"
Example 249
  x      = "what state bordering nevada has the largest population ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '_state', '(', 'V0', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_state', '(', 'V1', ')', ',', '_population', '(', 'V1', ',', 'V0', ')', ')', ')', ')']"
