100 epochs, attention, batch_size=10

==========START TRAINING=========
/Users/niyixuan/PycharmProjects/CS388_NLP/project_2_1/models.py:59: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.
  return F.softmax(attn_energies).unsqueeze(1)
/Users/niyixuan/PycharmProjects/CS388_NLP/venv/lib/python3.6/site-packages/torch/nn/functional.py:1339: UserWarning: nn.functional.tanh is deprecated. Use torch.tanh instead.
  warnings.warn("nn.functional.tanh is deprecated. Use torch.tanh instead.")
/Users/niyixuan/PycharmProjects/CS388_NLP/project_2_1/masked_cross_entropy.py:37: UserWarning: Implicit dimension choice for log_softmax has been deprecated. Change the call to include dim=X as an argument.
  log_probs_flat = functional.log_softmax(logits_flat)
/Users/niyixuan/PycharmProjects/CS388_NLP/project_2_1/masked_cross_entropy.py:9: UserWarning: torch.range is deprecated in favor of torch.arange and will be removed in 0.5. Note that arange generates values in [start; end), not [start; end].
  seq_range = torch.range(0, max_len - 1).long()
main.py:276: UserWarning: torch.nn.utils.clip_grad_norm is now deprecated in favor of torch.nn.utils.clip_grad_norm_.
  ec = torch.nn.utils.clip_grad_norm(encoder.parameters(), 50.0)
main.py:277: UserWarning: torch.nn.utils.clip_grad_norm is now deprecated in favor of torch.nn.utils.clip_grad_norm_.
  dc = torch.nn.utils.clip_grad_norm(decoder.parameters(), 50.0)
0m 46s (- 75m 55s) (1 1%) 514.6110
1m 31s (- 74m 45s) (2 2%) 217.6316
2m 17s (- 74m 18s) (3 3%) 157.3648
3m 4s (- 73m 44s) (4 4%) 126.4230
3m 50s (- 72m 54s) (5 5%) 108.4382
4m 38s (- 72m 36s) (6 6%) 97.7189
5m 25s (- 72m 0s) (7 7%) 85.4999
6m 10s (- 71m 3s) (8 8%) 79.2645
6m 56s (- 70m 10s) (9 9%) 71.0089
7m 42s (- 69m 25s) (10 10%) 65.3244
8m 30s (- 68m 47s) (11 11%) 62.4632
9m 17s (- 68m 5s) (12 12%) 56.7605
10m 2s (- 67m 9s) (13 13%) 53.4238
10m 48s (- 66m 22s) (14 14%) 48.9816
11m 33s (- 65m 29s) (15 15%) 47.0190
12m 20s (- 64m 45s) (16 16%) 43.4631
13m 5s (- 63m 55s) (17 17%) 41.5704
13m 52s (- 63m 12s) (18 18%) 38.6052
14m 39s (- 62m 28s) (19 19%) 36.8955
15m 26s (- 61m 44s) (20 20%) 35.5191
16m 12s (- 60m 59s) (21 21%) 30.8152
16m 59s (- 60m 14s) (22 22%) 30.2193
17m 43s (- 59m 21s) (23 23%) 28.6068
18m 27s (- 58m 28s) (24 24%) 26.7948
19m 13s (- 57m 40s) (25 25%) 25.2904
20m 0s (- 56m 58s) (26 26%) 26.7688
20m 48s (- 56m 14s) (27 27%) 23.7511
21m 34s (- 55m 28s) (28 28%) 21.9799
22m 20s (- 54m 42s) (29 28%) 20.7035
23m 6s (- 53m 55s) (30 30%) 21.4188
23m 51s (- 53m 7s) (31 31%) 19.9134
24m 38s (- 52m 21s) (32 32%) 17.6289
25m 23s (- 51m 33s) (33 33%) 16.5298
26m 8s (- 50m 44s) (34 34%) 15.3941
26m 53s (- 49m 56s) (35 35%) 14.8667
27m 37s (- 49m 5s) (36 36%) 14.5453
28m 22s (- 48m 19s) (37 37%) 14.5733
29m 9s (- 47m 35s) (38 38%) 15.4327
29m 59s (- 46m 54s) (39 39%) 13.1949
30m 47s (- 46m 11s) (40 40%) 11.7006
31m 33s (- 45m 25s) (41 41%) 9.7717
32m 19s (- 44m 38s) (42 42%) 10.0893
33m 6s (- 43m 53s) (43 43%) 9.7508
33m 52s (- 43m 7s) (44 44%) 9.1183
34m 37s (- 42m 19s) (45 45%) 8.9250
35m 23s (- 41m 32s) (46 46%) 8.3314
36m 9s (- 40m 45s) (47 47%) 8.2813
36m 56s (- 40m 1s) (48 48%) 8.2262
37m 46s (- 39m 18s) (49 49%) 8.1977
38m 36s (- 38m 36s) (50 50%) 6.3136
39m 26s (- 37m 54s) (51 51%) 6.2114
40m 16s (- 37m 11s) (52 52%) 7.0359
41m 11s (- 36m 32s) (53 53%) 6.6492
42m 2s (- 35m 48s) (54 54%) 4.8634
42m 53s (- 35m 5s) (55 55%) 5.4378
43m 44s (- 34m 21s) (56 56%) 5.4050
44m 33s (- 33m 36s) (57 56%) 5.0545
45m 25s (- 32m 53s) (58 57%) 4.1898
46m 19s (- 32m 11s) (59 59%) 3.7372
47m 9s (- 31m 26s) (60 60%) 3.8820
47m 59s (- 30m 41s) (61 61%) 3.8064
48m 49s (- 29m 55s) (62 62%) 3.8126
49m 41s (- 29m 11s) (63 63%) 3.7083
50m 33s (- 28m 26s) (64 64%) 3.4899
51m 25s (- 27m 41s) (65 65%) 2.5192
52m 16s (- 26m 55s) (66 66%) 2.0197
53m 9s (- 26m 10s) (67 67%) 3.0815
54m 1s (- 25m 25s) (68 68%) 2.1782
54m 50s (- 24m 38s) (69 69%) 2.7962
55m 41s (- 23m 52s) (70 70%) 2.2940
56m 33s (- 23m 6s) (71 71%) 2.0699
57m 24s (- 22m 19s) (72 72%) 2.8927
58m 18s (- 21m 33s) (73 73%) 1.8882
59m 9s (- 20m 47s) (74 74%) 2.1230
59m 59s (- 19m 59s) (75 75%) 2.9442
60m 49s (- 19m 12s) (76 76%) 2.8066
61m 41s (- 18m 25s) (77 77%) 1.8652
62m 33s (- 17m 38s) (78 78%) 2.6853
63m 24s (- 16m 51s) (79 79%) 1.9594
64m 17s (- 16m 4s) (80 80%) 1.8624
65m 10s (- 15m 17s) (81 81%) 3.0589
66m 1s (- 14m 29s) (82 82%) 1.4849
66m 54s (- 13m 42s) (83 83%) 2.4257
67m 42s (- 12m 53s) (84 84%) 1.1890
68m 29s (- 12m 5s) (85 85%) 2.6632
69m 15s (- 11m 16s) (86 86%) 1.7069
70m 1s (- 10m 27s) (87 87%) 3.1070
70m 49s (- 9m 39s) (88 88%) 1.7394
71m 35s (- 8m 50s) (89 89%) 2.7903
72m 20s (- 8m 2s) (90 90%) 1.3515
73m 7s (- 7m 13s) (91 91%) 1.0272
73m 54s (- 6m 25s) (92 92%) 0.7226
74m 41s (- 5m 37s) (93 93%) 0.6261
75m 27s (- 4m 48s) (94 94%) 0.4496
76m 14s (- 4m 0s) (95 95%) 0.6307
76m 58s (- 3m 12s) (96 96%) 0.4767
77m 45s (- 2m 24s) (97 97%) 0.3392
78m 30s (- 1m 36s) (98 98%) 0.4011
79m 16s (- 0m 48s) (99 99%) 0.5305
80m 2s (- 0m 0s) (100 100%) 1.4271
=======TRAIN EVALUATION=======
Loading JAR files: evaluator.jar
gold: 0 syntax errors, 0 executor errors
predicted: 6 syntax errors, 4 executor errors
Example 49
  x      = "what is the length of the colorado river in texas ?"
  y_tok  = "['_answer', '(', 'NV', ',', '(', '_len', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_riverid', '(', 'colorado', ')', ')', ',', '_river', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'texas', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_len', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_riverid', '(', 'colorado', ')', ')', ',', '_river', '(', 'V0', ')', ')', ')']"
Example 99
  x      = "how many cities are there in the us ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_count', '(', 'NV', ',', '(', '_city', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ',', 'V2', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_count', '(', 'NV', ',', '(', '_city', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ',', 'V2', ')', ')']"
Example 149
  x      = "what state has the most people ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_state', '(', 'V1', ')', ',', '_population', '(', 'V1', ',', 'V0', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_state', '(', 'V1', ')', ',', '_population', '(', 'V1', ',', 'V0', ')', ')', ')', ')']"
Example 199
  x      = "what is the population of oregon ?"
  y_tok  = "['_answer', '(', 'NV', ',', '(', '_population', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'oregon', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_population', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'oregon', ')', ')', ')', ')']"
Example 249
  x      = "what is the most populated capital in the usa ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_population', '(', 'V1', ',', 'V0', ')', ',', '_capital', '(', 'V1', ')', ',', '_loc', '(', 'V1', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_population', '(', 'V1', ',', 'V0', ')', ',', '_capital', '(', 'V1', ')', ',', '_loc', '(', 'V1', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ')', ')']"
Example 299
  x      = "what is the largest state traversed by the mississippi river ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '(', '_state', '(', 'V0', ')', ',', '_traverse', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_riverid', '(', 'mississippi', ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '(', '_state', '(', 'V0', ')', ',', '_traverse', '(', 'NV', ',', 'V1', ')', ',', '_shortest', '(', 'V0', ',', '(', '_state', '(', 'V0', ')', ')', ')', ')']"
Example 349
  x      = "what is the smallest state bordering ohio ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_smallest', '(', 'V0', ',', '(', '_state', '(', 'V0', ')', ',', '_next_to', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'ohio', ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_smallest', '(', 'V0', ',', '(', '_state', '(', 'V0', ')', ',', '_next_to', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'ohio', ')', ')', ')', ')', ')']"
Example 399
  x      = "how many people live in california ?"
  y_tok  = "['_answer', '(', 'NV', ',', '(', '_population', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'california', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_population', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'california', ')', ')', ')', ')']"
Example 449
  x      = "in which state does the highest point in usa exist ?"
  y_tok  = "['_answer', '(', 'NV', ',', '(', '_loc', '(', 'NV', ',', 'V1', ')', ',', '_state', '(', 'V1', ')', ',', '_highest', '(', 'V0', ',', '(', '_place', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_loc', '(', 'NV', ',', 'V1', ')', ',', '_state', '(', 'V1', ')', ',', '_highest', '(', 'V0', ',', '(', '_place', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ')', ')', ')']"
Exact logical form matches: 447 / 480 = 0.931
Token-level accuracy: 15059 / 15498 = 0.972
Denotation matches: 456 / 480 = 0.950
=======END OF TRAIN EVALUATION=======
=======DEV EVALUATION=======
Loading JAR files: evaluator.jar
gold: 0 syntax errors, 0 executor errors
predicted: 13 syntax errors, 2 executor errors
Example 24
  x      = "what is the largest city in minnesota by population ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_city', '(', 'V1', ')', ',', '_loc', '(', 'V1', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'minnesota', ')', ')', ',', '_population', '(', 'V2', ',', 'V1', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '(', '_city', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'kansas', ')', ')', ')', ')', ')']"
Example 49
  x      = "what is the longest river flowing through new york ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_longest', '(', 'V0', ',', '(', '_river', '(', 'V0', ')', ',', '_traverse', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', "'", 'new', 'york', "'", ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_longest', '(', 'V0', ',', '(', '_river', '(', 'V0', ')', ',', '_traverse', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', "'", 'new', 'mexico', "'", ')', ')', ')', ')', ')']"
Example 74
  x      = "what is the capital of utah ?"
  y_tok  = "['_answer', '(', 'NV', ',', '(', '_capital', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'utah', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_capital', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'maryland', ')', ')', ')', ')']"
Example 99
  x      = "what is the lowest point in california ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_lowest', '(', 'V0', ',', '(', '_place', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'california', ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_lowest', '(', 'V0', ',', '(', '_place', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'california', ')', ')', ')', ')', ')']"
Exact logical form matches: 44 / 120 = 0.367
Token-level accuracy: 3040 / 3908 = 0.778
Denotation matches: 48 / 120 = 0.400
=======END OF DEV EVALUATION=======
=======FINAL EVALUATION ON BLIND TEST=======