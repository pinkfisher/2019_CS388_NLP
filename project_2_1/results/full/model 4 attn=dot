attn_model = dot

==========START TRAINING=========
/Users/niyixuan/PycharmProjects/CS388_NLP/project_2_1/models.py:59: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.
  return F.softmax(attn_energies).unsqueeze(1)
/Users/niyixuan/PycharmProjects/CS388_NLP/venv/lib/python3.6/site-packages/torch/nn/functional.py:1339: UserWarning: nn.functional.tanh is deprecated. Use torch.tanh instead.
  warnings.warn("nn.functional.tanh is deprecated. Use torch.tanh instead.")
/Users/niyixuan/PycharmProjects/CS388_NLP/project_2_1/masked_cross_entropy.py:37: UserWarning: Implicit dimension choice for log_softmax has been deprecated. Change the call to include dim=X as an argument.
  log_probs_flat = functional.log_softmax(logits_flat)
/Users/niyixuan/PycharmProjects/CS388_NLP/project_2_1/masked_cross_entropy.py:9: UserWarning: torch.range is deprecated in favor of torch.arange and will be removed in 0.5. Note that arange generates values in [start; end), not [start; end].
  seq_range = torch.range(0, max_len - 1).long()
main.py:295: UserWarning: torch.nn.utils.clip_grad_norm is now deprecated in favor of torch.nn.utils.clip_grad_norm_.
  ec = torch.nn.utils.clip_grad_norm(encoder.parameters(), 50.0)
main.py:296: UserWarning: torch.nn.utils.clip_grad_norm is now deprecated in favor of torch.nn.utils.clip_grad_norm_.
  dc = torch.nn.utils.clip_grad_norm(decoder.parameters(), 50.0)
0m 36s (- 59m 59s) (1 1%) 635.0360
1m 14s (- 60m 43s) (2 2%) 445.1019
1m 52s (- 60m 40s) (3 3%) 363.3402
2m 30s (- 60m 15s) (4 4%) 332.6971
3m 5s (- 58m 46s) (5 5%) 355.4706
3m 38s (- 57m 8s) (6 6%) 319.0535
4m 12s (- 55m 50s) (7 7%) 276.4107
4m 44s (- 54m 34s) (8 8%) 255.6740
5m 16s (- 53m 17s) (9 9%) 257.2692
5m 47s (- 52m 11s) (10 10%) 236.4756
6m 20s (- 51m 18s) (11 11%) 236.2134
6m 52s (- 50m 28s) (12 12%) 209.6489
7m 24s (- 49m 31s) (13 13%) 213.4569
7m 56s (- 48m 45s) (14 14%) 194.7882
8m 26s (- 47m 49s) (15 15%) 210.0139
8m 58s (- 47m 6s) (16 16%) 207.4541
11m 22s (- 55m 32s) (17 17%) 171.8974
11m 56s (- 54m 22s) (18 18%) 165.3491
12m 30s (- 53m 19s) (19 19%) 164.2550
13m 3s (- 52m 14s) (20 20%) 167.0614
13m 34s (- 51m 5s) (21 21%) 154.9007
14m 7s (- 50m 5s) (22 22%) 158.6794
14m 39s (- 49m 4s) (23 23%) 149.8203
15m 9s (- 48m 1s) (24 24%) 148.3345
15m 42s (- 47m 7s) (25 25%) 125.7620
16m 15s (- 46m 16s) (26 26%) 126.0068
16m 48s (- 45m 25s) (27 27%) 125.3491
17m 19s (- 44m 34s) (28 28%) 136.3757
17m 51s (- 43m 43s) (29 28%) 132.7664
18m 22s (- 42m 53s) (30 30%) 129.8243
18m 54s (- 42m 4s) (31 31%) 123.9629
19m 26s (- 41m 18s) (32 32%) 122.1662
19m 57s (- 40m 32s) (33 33%) 113.3654
20m 29s (- 39m 46s) (34 34%) 105.7236
20m 59s (- 38m 59s) (35 35%) 115.8241
21m 29s (- 38m 12s) (36 36%) 120.1049
22m 0s (- 37m 28s) (37 37%) 99.5641
22m 31s (- 36m 44s) (38 38%) 116.6219
23m 3s (- 36m 4s) (39 39%) 114.9735
23m 37s (- 35m 26s) (40 40%) 97.0219
24m 10s (- 34m 47s) (41 41%) 89.8520
58m 10s (- 80m 20s) (42 42%) 96.5766
130m 33s (- 173m 4s) (43 43%) 106.4032
200m 28s (- 255m 9s) (44 44%) 98.2363
201m 0s (- 245m 40s) (45 45%) 88.9371
201m 33s (- 236m 36s) (46 46%) 90.6734
202m 7s (- 227m 56s) (47 47%) 99.3805
202m 40s (- 219m 33s) (48 48%) 87.7552
203m 12s (- 211m 29s) (49 49%) 93.8806
203m 42s (- 203m 42s) (50 50%) 100.4462
204m 14s (- 196m 13s) (51 51%) 98.5463
204m 45s (- 189m 0s) (52 52%) 99.1217
205m 19s (- 182m 4s) (53 53%) 98.4904
205m 50s (- 175m 21s) (54 54%) 82.6244
206m 30s (- 168m 57s) (55 55%) 94.0613
207m 11s (- 162m 47s) (56 56%) 103.6411
207m 45s (- 156m 43s) (57 56%) 83.9215
208m 18s (- 150m 50s) (58 57%) 86.4684
208m 51s (- 145m 8s) (59 59%) 98.1974
209m 24s (- 139m 36s) (60 60%) 87.6534
209m 56s (- 134m 13s) (61 61%) 88.6782
210m 28s (- 129m 0s) (62 62%) 72.5093
211m 0s (- 123m 55s) (63 63%) 99.1644
211m 33s (- 119m 0s) (64 64%) 86.5676
212m 5s (- 114m 12s) (65 65%) 82.8720
212m 38s (- 109m 32s) (66 66%) 79.8341
213m 11s (- 105m 0s) (67 67%) 98.0187
213m 44s (- 100m 35s) (68 68%) 101.4130
214m 16s (- 96m 16s) (69 69%) 78.3752
214m 49s (- 92m 4s) (70 70%) 83.5042
215m 23s (- 87m 58s) (71 71%) 91.0938
215m 56s (- 83m 58s) (72 72%) 75.8267
216m 29s (- 80m 4s) (73 73%) 99.5108
217m 2s (- 76m 15s) (74 74%) 84.1054
217m 33s (- 72m 31s) (75 75%) 94.1665
218m 4s (- 68m 51s) (76 76%) 89.6549
218m 36s (- 65m 17s) (77 77%) 106.3813
219m 9s (- 61m 48s) (78 78%) 82.5177
219m 40s (- 58m 23s) (79 79%) 116.6622
220m 13s (- 55m 3s) (80 80%) 88.0718
220m 46s (- 51m 47s) (81 81%) 99.6141
221m 18s (- 48m 34s) (82 82%) 85.5986
221m 50s (- 45m 26s) (83 83%) 81.5678
222m 23s (- 42m 21s) (84 84%) 75.3613
222m 55s (- 39m 20s) (85 85%) 87.0247
223m 27s (- 36m 22s) (86 86%) 83.7651
224m 0s (- 33m 28s) (87 87%) 82.9274
224m 32s (- 30m 37s) (88 88%) 67.7356
225m 5s (- 27m 49s) (89 89%) 86.3410
225m 37s (- 25m 4s) (90 90%) 70.1463
226m 9s (- 22m 22s) (91 91%) 102.4552
226m 42s (- 19m 42s) (92 92%) 84.1879
227m 13s (- 17m 6s) (93 93%) 88.6826
227m 45s (- 14m 32s) (94 94%) 75.0224
228m 17s (- 12m 0s) (95 95%) 84.0381
228m 49s (- 9m 32s) (96 96%) 70.3387
229m 22s (- 7m 5s) (97 97%) 94.1108
229m 54s (- 4m 41s) (98 98%) 74.6442
230m 26s (- 2m 19s) (99 99%) 79.9142
230m 59s (- 0m 0s) (100 100%) 81.3036
=======TRAIN EVALUATION=======
Loading JAR files: evaluator.jar
gold: 0 syntax errors, 0 executor errors
predicted: 3 syntax errors, 1 executor errors
Example 49
  x      = "what is the length of the colorado river in texas ?"
  y_tok  = "['_answer', '(', 'NV', ',', '(', '_len', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_riverid', '(', 'colorado', ')', ')', ',', '_river', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'texas', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_len', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_riverid', '(', 'colorado', ')', ')', ',', '_river', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'texas', ')', ')', ')', ')']"
Example 99
  x      = "how many cities are there in the us ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_count', '(', 'NV', ',', '(', '_city', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ',', 'V2', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_count', '(', 'NV', ',', '(', '_city', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ',', 'V2', ')', ')']"
Example 149
  x      = "what state has the most people ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_state', '(', 'V1', ')', ',', '_population', '(', 'V1', ',', 'V0', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_state', '(', 'V1', ')', ',', '_population', '(', 'V1', ',', 'V0', ')', ')', ')', ')']"
Example 199
  x      = "what is the population of oregon ?"
  y_tok  = "['_answer', '(', 'NV', ',', '(', '_population', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'oregon', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_population', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'oregon', ')', ')', ')', ')']"
Example 249
  x      = "what is the most populated capital in the usa ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_population', '(', 'V1', ',', 'V0', ')', ',', '_capital', '(', 'V1', ')', ',', '_loc', '(', 'V1', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_population', '(', 'V1', ',', 'V0', ')', ',', '_capital', '(', 'V1', ')', ',', '_loc', '(', 'V1', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ')', ')']"
Example 299
  x      = "what is the largest state traversed by the mississippi river ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '(', '_state', '(', 'V0', ')', ',', '_traverse', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_riverid', '(', 'mississippi', ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '(', '_state', '(', 'V0', ')', ',', '_traverse', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_riverid', '(', 'mississippi', ')', ')', ')', ')', ')']"
Example 349
  x      = "what is the smallest state bordering ohio ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_smallest', '(', 'V0', ',', '(', '_state', '(', 'V0', ')', ',', '_next_to', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'ohio', ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_smallest', '(', 'V0', ',', '(', '_state', '(', 'V0', ')', ',', '_next_to', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'ohio', ')', ')', ')', ')', ')']"
Example 399
  x      = "how many people live in california ?"
  y_tok  = "['_answer', '(', 'NV', ',', '(', '_population', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'california', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_population', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'california', ')', ')', ')', ')']"
Example 449
  x      = "in which state does the highest point in usa exist ?"
  y_tok  = "['_answer', '(', 'NV', ',', '(', '_loc', '(', 'NV', ',', 'V1', ')', ',', '_state', '(', 'V1', ')', ',', '_highest', '(', 'V0', ',', '(', '_place', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_loc', '(', 'NV', ',', 'V1', ')', ',', '_state', '(', 'V1', ')', ',', '_highest', '(', 'V0', ',', '(', '_place', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ')', ')', ')']"
Exact logical form matches: 471 / 480 = 0.981
Token-level accuracy: 15445 / 15498 = 0.997
Denotation matches: 475 / 480 = 0.990
=======END OF TRAIN EVALUATION=======
=======DEV EVALUATION=======
Loading JAR files: evaluator.jar
gold: 0 syntax errors, 0 executor errors
predicted: 9 syntax errors, 8 executor errors
Example 24
  x      = "what is the largest city in minnesota by population ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_city', '(', 'V1', ')', ',', '_loc', '(', 'V1', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'minnesota', ')', ')', ',', '_population', '(', 'V2', ',', 'V1', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '(', '_city', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'missouri', ')', ')', ')', ')', ')']"
Example 49
  x      = "what is the longest river flowing through new york ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_longest', '(', 'V0', ',', '(', '_river', '(', 'V0', ')', ',', '_traverse', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', "'", 'new', 'york', "'", ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_longest', '(', 'V0', ',', '(', '_river', '(', 'V0', ')', ',', '_traverse', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', "'", 'new', 'york', "'", ')', ')', ')', ')', ')']"
Example 74
  x      = "what is the capital of utah ?"
  y_tok  = "['_answer', '(', 'NV', ',', '(', '_capital', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'utah', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_capital', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'indiana', ')', ')', ')', ')']"
Example 99
  x      = "what is the lowest point in california ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_lowest', '(', 'V0', ',', '(', '_place', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'california', ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_lowest', '(', 'V0', ',', '(', '_place', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'california', ')', ')', ')', ')', ')']"
Exact logical form matches: 65 / 120 = 0.542
Token-level accuracy: 3308 / 3908 = 0.846
Denotation matches: 69 / 120 = 0.575
=======END OF DEV EVALUATION=======
=======FINAL EVALUATION ON BLIND TEST=======
Loading JAR files: evaluator.jar
gold: 0 syntax errors, 0 executor errors
predicted: 12 syntax errors, 9 executor errors
Example 49
  x      = "what state has the most major cities ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '_state', '(', 'V0', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_most', '(', 'V0', ',', 'NV', ',', '(', '_state', '(', 'V1', ')', ',', '_loc', '(', 'V0', ',', 'V1', ')', ',', '_city', '(', 'V0', ')', ')', ')', ')']"
Example 99
  x      = "what are the major cities in the usa ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '_state', '(', 'V0', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_major', '(', 'V0', ')', ',', '_city', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ')']"
Example 149
  x      = "which state has the lowest point that borders idaho ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '_state', '(', 'V0', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_state', '(', 'V0', ')', ',', '_loc', '(', 'NV', ',', 'V1', ')', ',', '_lowest', '(', 'V0', ',', '(', '_state', '(', 'V0', ')', ',', '_next_to', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'tennessee', ')', ')', ')', ')', ')']"
Example 199
  x      = "how long is the longest river in california ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '_state', '(', 'V0', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_len', '(', 'NV', ',', 'V1', ')', ',', '_longest', '(', 'V0', ',', '(', '_river', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'california', ')', ')', ')', ')', ')']"
Example 249
  x      = "what state bordering nevada has the largest population ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '_state', '(', 'V0', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_state', '(', 'V1', ')', ',', '_population', '(', 'V1', ',', 'V0', ')', ')', ')', ')']"