python main.py --epochs 100 --batch_size 2, teacher_forcing=0

==========START TRAINING=========
/Users/niyixuan/PycharmProjects/CS388_NLP/project_2_1/models.py:59: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.
  return F.softmax(attn_energies).unsqueeze(1)
/Users/niyixuan/PycharmProjects/CS388_NLP/venv/lib/python3.6/site-packages/torch/nn/functional.py:1339: UserWarning: nn.functional.tanh is deprecated. Use torch.tanh instead.
  warnings.warn("nn.functional.tanh is deprecated. Use torch.tanh instead.")
/Users/niyixuan/PycharmProjects/CS388_NLP/project_2_1/masked_cross_entropy.py:37: UserWarning: Implicit dimension choice for log_softmax has been deprecated. Change the call to include dim=X as an argument.
  log_probs_flat = functional.log_softmax(logits_flat)
/Users/niyixuan/PycharmProjects/CS388_NLP/project_2_1/masked_cross_entropy.py:9: UserWarning: torch.range is deprecated in favor of torch.arange and will be removed in 0.5. Note that arange generates values in [start; end), not [start; end].
  seq_range = torch.range(0, max_len - 1).long()
main.py:294: UserWarning: torch.nn.utils.clip_grad_norm is now deprecated in favor of torch.nn.utils.clip_grad_norm_.
  ec = torch.nn.utils.clip_grad_norm(encoder.parameters(), 50.0)
main.py:295: UserWarning: torch.nn.utils.clip_grad_norm is now deprecated in favor of torch.nn.utils.clip_grad_norm_.
  dc = torch.nn.utils.clip_grad_norm(decoder.parameters(), 50.0)
0m 49s (- 81m 19s) (1 1%) 638.1816
1m 39s (- 80m 52s) (2 2%) 530.5447
2m 29s (- 80m 48s) (3 3%) 504.0642
3m 20s (- 80m 10s) (4 4%) 475.1599
4m 9s (- 79m 6s) (5 5%) 463.1987
5m 1s (- 78m 36s) (6 6%) 445.2383
5m 50s (- 77m 33s) (7 7%) 418.5911
6m 37s (- 76m 9s) (8 8%) 381.3823
7m 23s (- 74m 48s) (9 9%) 347.9291
8m 8s (- 73m 16s) (10 10%) 335.6321
8m 53s (- 71m 55s) (11 11%) 348.9673
9m 36s (- 70m 29s) (12 12%) 318.1632
10m 18s (- 68m 57s) (13 13%) 314.0527
11m 1s (- 67m 44s) (14 14%) 300.4876
11m 43s (- 66m 24s) (15 15%) 294.1132
12m 23s (- 65m 5s) (16 16%) 302.0555
13m 0s (- 63m 32s) (17 17%) 286.6085
13m 39s (- 62m 12s) (18 18%) 280.0540
14m 16s (- 60m 51s) (19 19%) 275.6500
14m 53s (- 59m 35s) (20 20%) 278.3957
15m 30s (- 58m 22s) (21 21%) 262.2863
16m 7s (- 57m 10s) (22 22%) 274.2910
16m 43s (- 55m 58s) (23 23%) 250.0735
17m 18s (- 54m 48s) (24 24%) 245.9595
17m 55s (- 53m 45s) (25 25%) 239.4012
18m 32s (- 52m 46s) (26 26%) 247.0604
19m 10s (- 51m 50s) (27 27%) 231.5145
19m 47s (- 50m 53s) (28 28%) 229.7489
20m 24s (- 49m 56s) (29 28%) 218.7338
21m 0s (- 49m 1s) (30 30%) 232.8018
21m 37s (- 48m 8s) (31 31%) 222.6732
22m 13s (- 47m 13s) (32 32%) 219.0316
22m 49s (- 46m 20s) (33 33%) 221.5840
23m 25s (- 45m 28s) (34 34%) 200.8233
24m 0s (- 44m 35s) (35 35%) 208.2582
24m 34s (- 43m 41s) (36 36%) 204.4928
25m 9s (- 42m 50s) (37 37%) 206.9793
25m 45s (- 42m 1s) (38 38%) 221.5593
26m 23s (- 41m 17s) (39 39%) 218.5183
27m 0s (- 40m 31s) (40 40%) 214.2642
27m 37s (- 39m 44s) (41 41%) 207.0140
28m 13s (- 38m 58s) (42 42%) 189.9650
28m 49s (- 38m 13s) (43 43%) 190.5531
29m 26s (- 37m 28s) (44 44%) 187.3282
30m 2s (- 36m 42s) (45 45%) 182.5105
30m 38s (- 35m 58s) (46 46%) 187.2172
31m 15s (- 35m 14s) (47 47%) 176.2689
31m 50s (- 34m 29s) (48 48%) 203.5899
32m 26s (- 33m 45s) (49 49%) 179.6579
33m 1s (- 33m 1s) (50 50%) 181.9407
33m 36s (- 32m 17s) (51 51%) 180.2245
34m 12s (- 31m 34s) (52 52%) 181.2112
34m 50s (- 30m 53s) (53 53%) 197.7842
35m 25s (- 30m 10s) (54 54%) 173.6491
36m 3s (- 29m 30s) (55 55%) 172.9120
36m 39s (- 28m 47s) (56 56%) 195.5096
37m 14s (- 28m 5s) (57 56%) 164.4890
37m 51s (- 27m 24s) (58 57%) 188.4615
38m 29s (- 26m 44s) (59 59%) 188.8586
39m 5s (- 26m 3s) (60 60%) 174.9291
39m 41s (- 25m 22s) (61 61%) 171.6155
40m 17s (- 24m 41s) (62 62%) 169.4281
40m 54s (- 24m 1s) (63 63%) 183.2904
41m 29s (- 23m 20s) (64 64%) 183.1004
42m 7s (- 22m 40s) (65 65%) 167.1986
42m 44s (- 22m 1s) (66 66%) 170.9561
43m 21s (- 21m 21s) (67 67%) 184.3551
43m 58s (- 20m 41s) (68 68%) 182.1216
44m 34s (- 20m 1s) (69 69%) 187.8865
45m 11s (- 19m 22s) (70 70%) 178.1443
45m 48s (- 18m 42s) (71 71%) 179.5488
46m 25s (- 18m 3s) (72 72%) 162.8794
47m 2s (- 17m 23s) (73 73%) 178.4941
47m 39s (- 16m 44s) (74 74%) 168.6724
48m 18s (- 16m 6s) (75 75%) 155.5773
48m 53s (- 15m 26s) (76 76%) 162.5698
49m 29s (- 14m 47s) (77 77%) 179.4903
50m 6s (- 14m 8s) (78 78%) 154.9277
50m 43s (- 13m 28s) (79 79%) 158.1552
51m 20s (- 12m 50s) (80 80%) 180.3569
51m 58s (- 12m 11s) (81 81%) 181.4165
52m 35s (- 11m 32s) (82 82%) 159.3355
53m 11s (- 10m 53s) (83 83%) 181.5974
53m 49s (- 10m 15s) (84 84%) 171.6445
54m 25s (- 9m 36s) (85 85%) 175.4220
55m 1s (- 8m 57s) (86 86%) 162.2364
55m 37s (- 8m 18s) (87 87%) 174.7452
56m 14s (- 7m 40s) (88 88%) 168.9032
56m 50s (- 7m 1s) (89 89%) 174.6534
57m 29s (- 6m 23s) (90 90%) 157.2351
58m 10s (- 5m 45s) (91 91%) 176.2508
58m 51s (- 5m 7s) (92 92%) 155.5322
59m 31s (- 4m 28s) (93 93%) 172.8276
60m 12s (- 3m 50s) (94 94%) 155.6677
60m 52s (- 3m 12s) (95 95%) 177.0531
61m 29s (- 2m 33s) (96 96%) 160.5758
62m 7s (- 1m 55s) (97 97%) 196.3441
62m 46s (- 1m 16s) (98 98%) 166.9976
63m 25s (- 0m 38s) (99 99%) 176.6801
64m 6s (- 0m 0s) (100 100%) 170.9811
=======TRAIN EVALUATION=======
Loading JAR files: evaluator.jar
gold: 0 syntax errors, 0 executor errors
predicted: 62 syntax errors, 6 executor errors
Example 49
  x      = "what is the length of the colorado river in texas ?"
  y_tok  = "['_answer', '(', 'NV', ',', '(', '_len', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_riverid', '(', 'colorado', ')', ')', ',', '_river', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'texas', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_len', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_riverid', '(', 'colorado', ')', ')', ',', '_river', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'texas', ')', ')', ')', ')', ')']"
Example 99
  x      = "how many cities are there in the us ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_count', '(', 'NV', ',', '(', '_city', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ',', 'V2', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_count', '(', 'NV', ',', '(', '_city', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ',', 'V2', ')', ')']"
Example 149
  x      = "what state has the most people ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_state', '(', 'V1', ')', ',', '_population', '(', 'V1', ',', 'V0', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_state', '(', 'V1', ')', ',', '_population', '(', 'V1', ',', 'V0', ')', ')', ')', ')']"
Example 199
  x      = "what is the population of oregon ?"
  y_tok  = "['_answer', '(', 'NV', ',', '(', '_population', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'oregon', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_population', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'oregon', ')', ')', ')', ')']"
Example 249
  x      = "what is the most populated capital in the usa ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_population', '(', 'V1', ',', 'V0', ')', ',', '_capital', '(', 'V1', ')', ',', '_loc', '(', 'V1', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_population', '(', 'V1', ',', 'V0', ')', ',', '_capital', '(', 'V1', ')', ',', '_loc', '(', 'V1', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ')', ')']"
Example 299
  x      = "what is the largest state traversed by the mississippi river ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '(', '_state', '(', 'V0', ')', ',', '_traverse', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_riverid', '(', 'mississippi', ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '(', '_state', '(', 'V0', ')', ',', '_traverse', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_riverid', '(', 'mississippi', ')', ')', ')', ')', ')']"
Example 349
  x      = "what is the smallest state bordering ohio ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_smallest', '(', 'V0', ',', '(', '_state', '(', 'V0', ')', ',', '_next_to', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'ohio', ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_smallest', '(', 'V0', ',', '(', '_state', '(', 'V0', ')', ',', '_next_to', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'ohio', ')', ')', ')', ')', ')']"
Example 399
  x      = "how many people live in california ?"
  y_tok  = "['_answer', '(', 'NV', ',', '(', '_population', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'california', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_population', '(', 'NV', ',', 'V1', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'california', ')', ')', ')', ')']"
Example 449
  x      = "in which state does the highest point in usa exist ?"
  y_tok  = "['_answer', '(', 'NV', ',', '(', '_loc', '(', 'NV', ',', 'V1', ')', ',', '_state', '(', 'V1', ')', ',', '_highest', '(', 'V0', ',', '(', '_place', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_loc', '(', 'NV', ',', 'V1', ')', ',', '_state', '(', 'V1', ')', ',', '_highest', '(', 'V0', ',', '(', '_place', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']"
Exact logical form matches: 401 / 480 = 0.835
Token-level accuracy: 15225 / 15498 = 0.982
Denotation matches: 407 / 480 = 0.848
=======END OF TRAIN EVALUATION=======
=======DEV EVALUATION=======
Loading JAR files: evaluator.jar
gold: 0 syntax errors, 0 executor errors
predicted: 22 syntax errors, 9 executor errors
Example 24
  x      = "what is the largest city in minnesota by population ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_city', '(', 'V1', ')', ',', '_loc', '(', 'V1', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'minnesota', ')', ')', ',', '_population', '(', 'V2', ',', 'V1', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_city', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'kansas', ')', ')', ')', ')', ')']"
Example 49
  x      = "what is the longest river flowing through new york ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_longest', '(', 'V0', ',', '(', '_river', '(', 'V0', ')', ',', '_traverse', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', "'", 'new', 'york', "'", ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_longest', '(', 'V0', ',', '(', '_river', '(', 'V0', ')', ',', '_traverse', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', "'", 'new', 'york', "'", ')', ')', ')', ')', ')']"
Example 74
  x      = "what is the capital of utah ?"
  y_tok  = "['_answer', '(', 'NV', ',', '(', '_capital', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'utah', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_capital', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'utah', ')', ')', ')', ')']"
Example 99
  x      = "what is the lowest point in california ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_lowest', '(', 'V0', ',', '(', '_place', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'california', ')', ')', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_lowest', '(', 'V0', ',', '(', '_place', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'california', ')', ')', ')', ')', ')']"
Exact logical form matches: 60 / 120 = 0.500
Token-level accuracy: 3314 / 3908 = 0.848
Denotation matches: 65 / 120 = 0.542
=======END OF DEV EVALUATION=======
=======FINAL EVALUATION ON BLIND TEST=======
Loading JAR files: evaluator.jar
gold: 0 syntax errors, 0 executor errors
predicted: 44 syntax errors, 17 executor errors
Example 49
  x      = "what state has the most major cities ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '_state', '(', 'V0', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_most', '(', 'V0', ',', 'NV', ',', '(', '_state', '(', 'V1', ')', ',', '_loc', '(', 'V0', ',', 'V1', ')', ',', '_major', '(', 'V0', ')', ')', ',', '_city', '(', 'V0', ')', ')', ')', ')']"
Example 99
  x      = "what are the major cities in the usa ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '_state', '(', 'V0', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_major', '(', 'V0', ')', ',', '_city', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_countryid', '(', 'usa', ')', ')', ')', ')']"
Example 149
  x      = "which state has the lowest point that borders idaho ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '_state', '(', 'V0', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_city', '(', 'NV', ',', 'V1', ')', ',', '_lowest', '(', 'V0', ',', '(', '_major', '(', 'V0', ')', ',', '_next_to', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'idaho', ')', ')', ')', ')', ')']"
Example 199
  x      = "how long is the longest river in california ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '_state', '(', 'V0', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '(', '_len', '(', 'NV', ',', 'V1', ')', ',', '_longest', '(', 'V0', ',', '(', '_river', '(', 'V0', ')', ',', '_loc', '(', 'V0', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'california', ')', ')', ')', ')', ')']"
Example 249
  x      = "what state bordering nevada has the largest population ?"
  y_tok  = "['_answer', '(', 'NV', ',', '_largest', '(', 'V0', ',', '_state', '(', 'V0', ')', ')', ')']"
  y_pred = "['_answer', '(', 'NV', ',', '_largest', '(', 'NV', ',', '(', '_state', '(', 'V1', ')', ',', '_next_to', '(', 'V1', ',', 'NV', ')', ',', '_const', '(', 'V0', ',', '_stateid', '(', 'V2', ')', ')', ')', ')', ')']"